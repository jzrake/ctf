#!/usr/bin/env python

import jinja2
import markdown


loader = jinja2.FileSystemLoader('_layouts')
env = jinja2.Environment(loader=loader)
layout = env.get_template('layout.html')


class MathJaxPattern(markdown.inlinepatterns.Pattern):
    def __init__(self):
        markdown.inlinepatterns.Pattern.__init__(self, r'(?<!\\)(\$\$?)(.+?)\2')

    def handleMatch(self, m):
        node = markdown.util.etree.Element('mathjax')
        node.text = markdown.util.AtomicString(m.group(2) + m.group(3) + m.group(2))
        return node

class MathJaxExtension(markdown.Extension):
    def extendMarkdown(self, md, md_globals):
        md.inlinePatterns.add('mathjax', MathJaxPattern(), '<escape')


def read_file(fname):
    md = ""
    py = ""
    attr = {'figures': [ ]}
    py_evaled = False
    for line in open(fname):
        if line.startswith('#+'):
            py += line.replace('#+', '')
        else:
            if not py_evaled:
                attr.update(eval(py))
                py_evaled = True
            md += line
    return md, attr


def make_section(title):
    fname = '_sections/%s.md' % title
    md, attr = read_file(fname)
    E = ['tables', 'toc', 'attr_list', MathJaxExtension()]
    attr['content'] = markdown.markdown(md, extensions=E)
    attr['title'] = title
    return attr


sections = [make_section('DensityWave')]
html = layout.render(sections=sections)

html = html.replace('<table>', '<table class="tftable">')
outf = open('index.html', 'w')
outf.write(html)
